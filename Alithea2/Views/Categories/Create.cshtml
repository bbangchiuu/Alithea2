@model Alithea2.Models.Category

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    Dictionary<String, String> errors = new Dictionary<string, string>();
    if (ViewBag.Errors != null)
    {
        errors = ViewBag.Errors as Dictionary<string, string>;
    }
}
@* *@
@* <h2>Create</h2> *@
@* *@
@* *@
@* @using (Html.BeginForm()) *@
@* { *@
@*     @Html.AntiForgeryToken() *@
@* *@
@*     <div class="form-horizontal"> *@
@*         <h4>Category</h4> *@
@*         <hr /> *@
@*         @Html.ValidationSummary(true, "", new { @class = "text-danger" }) *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.RoleNumber, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.RoleNumber, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.RoleNumber, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.CategoryName, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.CategoryName, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.CategoryDescription, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.CategoryDescription, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.CategoryDescription, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.CategoryImage, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.CategoryImage, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.CategoryImage, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.UpdatedAt, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.UpdatedAt, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.UpdatedAt, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.DeletedAt, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EditorFor(model => model.DeletedAt, new { htmlAttributes = new { @class = "form-control" } }) *@
@*                 @Html.ValidationMessageFor(model => model.DeletedAt, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" }) *@
@*             <div class="col-md-10"> *@
@*                 @Html.EnumDropDownListFor(model => model.Status, htmlAttributes: new { @class = "form-control" }) *@
@*                 @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" }) *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <div class="form-group"> *@
@*             <div class="col-md-offset-2 col-md-10"> *@
@*                 <input type="submit" value="Create" class="btn btn-default" /> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@

<div class="row">
    <div class="col-md-8 mx-auto grid-margin stretch-card">
        <div class="card">
            <div class="card-body">

                @if (TempData["Error"] != null)
                {
                    <h4>@TempData["Error"]</h4>
                }

                <h4 class="card-title">Danh mục</h4>
                <p class="card-description">Tạo danh mục</p>
                @using (Html.BeginForm("Create", "Categories", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.RoleNumber)
                        @Html.EditorFor(model => model.RoleNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RoleNumber, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryName)
                        @Html.EditorFor(model => model.CategoryName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CategoryName, errors.ContainsKey("CategoryName") ? errors["CategoryName"] : "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryDescription)
                        @Html.EditorFor(model => model.CategoryDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CategoryDescription, errors.ContainsKey("CategoryDescription") ? errors["CategoryDescription"] : "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryImage)
                        <div class="col-md-8">
                            <img id="preview" src="#" class="hidden img-thumbnail" style="width: 100px" alt="Alternate Text" />
                            @Html.EditorFor(model => model.CategoryImage, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
                            @Html.ValidationMessageFor(model => model.CategoryImage, errors.ContainsKey("CategoryImage") ? errors["CategoryImage"] : "", new { @class = "text-danger" })
                            <div style="margin-top: 5px">
                                <button type="button" id="upload_widget" class="btn btn-primary">Upload files</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Status)
                        @Html.EnumDropDownListFor(model => model.Status, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                    <input type="submit" class="btn btn-gradient-primary mr-2" value="Tạo danh mục mới" />
                }
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
var myWidget = cloudinary.createUploadWidget({
            cloudName: 'bangnguyen',
            uploadPreset: 'Alithea'}, (error, result) => {
            if (!error && result && result.event === "success") {
                var imgLink = result.info.secure_url;
                document.querySelector("input[name='CategoryImage']").value = imgLink;
                var imgPreview = document.getElementById("preview");
                imgPreview.src = imgLink;
                imgPreview.classList.remove("hidden");
            }
        }
    )

    document.getElementById("upload_widget").addEventListener("click", function(){
        myWidget.open();
    }, false);</script>
}